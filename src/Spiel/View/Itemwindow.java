/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Spiel.View;

import Spiel.Controller.Game;
import Spiel.model.Entities.Items.Item;
import Spiel.model.Entities.Player;
import Spiel.model.MainModel;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import sun.awt.image.FileImageSource;

/**
 *
 * @author Gamer
 */

public class Itemwindow extends javax.swing.JPanel implements Observer {


        private Player player;
        private int i;
        private final Game game;
        private Item[] items;
        private BufferedImage allitems;
        public static ImageIcon[][] singleitem= new ImageIcon[8][8];
        /**
         * Creates new form Itemwindow
         */
        public Itemwindow(Game game) {
                this.game=game;
                initComponents();
                try {
                      allitems= ImageIO.read(getClass().getResource("/resources/items1.png"));
                        //Erstellen der Icons für alle Items
                        for (int j = 0; j < 8; j++) {
                                for (int k = 0; k < 8; k++) {

                                singleitem[j][k] = new ImageIcon(allitems.getSubimage(j*32,k*32,32,32));
                                }
                        }

                } catch (Exception e) {
                        
                }
                
                setVisible(false);
        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        weaponLabel = new javax.swing.JLabel();
        armorLabel = new javax.swing.JLabel();
        headLineLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemList = new ItemList(game);
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(183, 89, 22));
        setForeground(new java.awt.Color(255, 255, 255));

        weaponLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        weaponLabel.setText("Weapon");
        weaponLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        weaponLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Waffe", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 1, 24), java.awt.Color.white)); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), weaponLabel, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        armorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        armorLabel.setText("Armor");
        armorLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        armorLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rüstung", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 1, 24), java.awt.Color.white)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), armorLabel, org.jdesktop.beansbinding.BeanProperty.create("foreground"));
        bindingGroup.addBinding(binding);

        headLineLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        headLineLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headLineLabel.setText("Ausrüstung");
        headLineLabel.setFocusable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${foreground}"), headLineLabel, org.jdesktop.beansbinding.BeanProperty.create("foreground"), "");
        bindingGroup.addBinding(binding);

        itemList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inventar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), java.awt.Color.black)); // NOI18N
        jScrollPane1.setViewportView(itemList);

        jLabel1.setFont(new java.awt.Font("Georgia", 2, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Drücke \"E\" um ein Item auszurüsten oder zu benutzen!");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(headLineLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(weaponLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(armorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headLineLabel)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weaponLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(armorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel armorLabel;
    private javax.swing.JLabel headLineLabel;
    private javax.swing.JList itemList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel weaponLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

        @Override
        public void update(transEnum enu, MainModel mm) {
                if (enu==transEnum.playerstats) {
                        this.player=mm.getPlayer();
                        this.weaponLabel.setText(player.getWeapon().getName()) ;
                        int weaponx=player.getWeapon().getSubimagex();
                        int weapony=player.getWeapon().getSubimagey();
                        this.weaponLabel.setIcon(singleitem[weaponx][weapony]);
                        int armorx=player.getArmor().getSubimagex();
                        int armory=player.getArmor().getSubimagey();
                        this.armorLabel.setIcon(singleitem[armorx][armory]);
                        this.armorLabel.setText(player.getArmor().getName());
                        i = itemList.getSelectedIndex();
                        items= (Item[]) player.getInventar().toArray(new Item[0]);
                        this.itemList.setListData(items);
                        
                        
                        
                        
                        
                        
                        
                }
        }

        @Override
        public void update(char[][] map) {
        }

     
        
        
        public void focustoItemList(){
                itemList.requestFocus();
                
                
        }

        public Player getPlayer() {
                return player;
        }

        public JLabel getWeaponLabel() {
                return weaponLabel;
        }
        
}
